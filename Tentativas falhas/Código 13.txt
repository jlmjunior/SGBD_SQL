-- ##################  FUNÇÃO PARA CALCULAR A DISTANCIA DA PARADA ################## 

CREATE FUNCTION calcular_distancia (lat FLOAT, lon FLOAT, stop_lat FLOAT, stop_lon FLOAT)
RETURNS FLOAT
DETERMINISTIC
RETURN (6371 * acos(
 cos( radians(lat) )
 * cos( radians( stop_lat ) )
 * cos( radians( stop_lon ) - radians(lon) )
 + sin( radians(lat) )
 * sin( radians( stop_lat ) ) 
 )
);

-- ##################  PROCEDIMENTO ################## 

CREATE PROCEDURE executar (lat_comeco FLOAT, lon_comeco FLOAT,  lat_termino FLOAT, lon_termino FLOAT)
SELECT q.route_id, routes.route_long_name FROM 
(
	SELECT f.trip_id, 
	trips.route_id FROM 
		(
		SELECT e.trip_id, 
		( e.inicio + t.fim ) AS resultado FROM 
			(
			SELECT 
            trip_id, 
			stop_id, stop_sequence, 
			inicio FROM 
            (
				SELECT 
				stop_times.trip_id,
				stop_times.stop_id,
				stop_times.stop_sequence,
				calcular_distancia(lat_comeco,lon_comeco, stop_lat, stop_lon) AS inicio,
				calcular_distancia(lat_termino,lon_termino, stop_lat, stop_lon) AS fim 
                FROM stop_times
			INNER JOIN stops ON stop_times.stop_id = stops.stop_id
            ) AS r
			ORDER BY inicio
            ) AS e, 
	(
	SELECT DISTINCT trip_id, 
	stop_id, 
	stop_sequence, 
	fim FROM 
		(
		SELECT 
		stop_times.trip_id,
		stop_times.stop_id,
		stop_times.stop_sequence,
		calcular_distancia(lat_comeco,lon_comeco, stop_lat, stop_lon) AS inicio,
		calcular_distancia(lat_termino,lon_termino, stop_lat, stop_lon) AS fim
		FROM stop_times
		INNER JOIN stops ON stop_times.stop_id = stops.stop_id
		) AS r
	ORDER BY fim
	) AS t
WHERE e.trip_id = t.trip_id AND e.stop_sequence < t.stop_sequence
ORDER BY resultado
LIMIT 1) AS f
INNER JOIN trips ON f.trip_id = trips.trip_id
) AS q
INNER JOIN routes ON q.route_id = routes.route_id;

-- #################################### CALL PROCEDURES #################################### 

CALL executar(-30.099928,-51.264379,-30.004161,-51.159343);